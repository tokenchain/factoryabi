
class {{toPythonClassname this.languageSpecificName}}Method(ContractMethod): # pylint: disable=invalid-name
    """Various interfaces to the {{this.name}} method."""

    def __init__(self, elib: MiliDoS, contract_address: str, contract_function: ContractFunction, validator: Validator=None):
        """Persist instance data."""
        super().__init__(elib, contract_address{{#if inputs}}, validator{{/if}})
        self._underlying_method = contract_function
        self.sign = validator.getSignature("{{this.name}}")

    {{#if inputs}}
    def validate_and_normalize_inputs(self, {{> typed_params inputs=inputs}})->any:
        """Validate the inputs to the {{this.name}} method."""
        {{#each this.inputs}}
        self.validator.assert_valid(
            method_name='{{../name}}',
            parameter_name='{{name}}',
            argument_value={{toPythonIdentifier name}},
        )
        {{#if (equal type 'address')}}
        {{toPythonIdentifier this.name}} = self.validate_and_checksum_address({{toPythonIdentifier this.name}})
        {{else if (equal type 'uint256')}}
        # safeguard against fractional inputs
        {{toPythonIdentifier this.name}} = int({{toPythonIdentifier this.name}})
{{/if}}
{{/each}}
        return ({{> params }})

    {{/if}}

    {{#if (equal this.stateMutability 'pure')}}
    def block_call(self,{{#if inputs}}{{> typed_params inputs=inputs}},{{/if}} debug:bool=False) -> {{> call_return_type outputs=outputs type='call'~}}:
        _fn = self._underlying_method({{#if inputs}}{{> params}}{{/if}})
        {{#hasReturnValue}}returned = {{/hasReturnValue}}_fn.call({
                'from': self._operate
            })
        {{#hasReturnValue}}
        return {{makeOutputsValue 'returned' outputs}}
        {{/hasReturnValue}}
    {{/if}}

    {{#if (equal this.stateMutability 'view')}}
    def block_call(self,{{#if inputs}}{{> typed_params inputs=inputs}},{{/if}} debug:bool=False) -> {{> call_return_type outputs=outputs type='call'~}}:
        _fn = self._underlying_method({{#if inputs}}{{> params}}{{/if}})
        {{#hasReturnValue}}returned = {{/hasReturnValue}}_fn.call({
                'from': self._operate
            })
        {{#hasReturnValue}}
        return {{makeOutputsValue 'returned' outputs}}
        {{/hasReturnValue}}
    {{/if}}
    {{^if this.constant}}
    def block_send(self, {{#if inputs}}{{> typed_params inputs=inputs}},{{/if}}_valeth:int=0) -> {{> call_return_type outputs=outputs type='call'~}}:
        """Execute underlying contract method via eth_call.
{{sanitizeDevdocDetails this.name this.devdoc.details 8}}{{~#if this.devdoc.params~}}{{#each this.devdoc.params}}
{{makeParameterDocstringRole @key this 8}}{{/each}}{{/if}}
        :param tx_params: transaction parameters
        {{#if this.constant~}}
        {{#if this.devdoc.return}}
{{makeReturnDocstringRole this.devdoc.return 8}}{{/if}}
        {{else}}
        :returns: the return value of the underlying method.
        {{/if}}
        """
        _fn = self._underlying_method({{#if inputs}}{{> params}}{{/if}})
        try:

            _t = _fn.buildTransaction({
                'from': self._operate,
                'gas': self.gas_limit,
                'gasPrice': self.gas_price_wei
            })
            _t['nonce'] = self._web3_eth.getTransactionCount(self._operate)

            if _valeth > 0:
                _t['value'] = _valeth

            if self.debug_method:
                print(f"======== Signing ✅ by {self._operate}")
                print(f"======== Transaction ✅ check")
                print(_t)

            if 'data' in _t:

                signed = self._web3_eth.account.sign_transaction(_t)
                txHash = self._web3_eth.sendRawTransaction(signed.rawTransaction)
                tx_receipt = None
                if self.auto_reciept is True:
                    print(f"======== awaiting Confirmation 🚸️ {self.sign}")
                    tx_receipt = self._web3_eth.wait_for_transaction_receipt(txHash)
                    if self.debug_method:
                        print("======== TX Result ✅")
                        print(tx_receipt)

                self._on_receipt_handle("{{this.languageSpecificName}}", tx_receipt, txHash)

            if self.auto_reciept is False:
                time.sleep(self._wait)


        except ContractLogicError as er:
            print(f"{Bolors.FAIL}Error {er} {Bolors.RESET}: {{this.languageSpecificName}}")
            message = f"Error {er}: {{this.languageSpecificName}}"
            self._on_fail("{{this.languageSpecificName}}", message)
        except ValueError as err:
            if "message" in err.args[0]:
                message = err.args[0]["message"]
                print(f"{Bolors.FAIL}Error Revert {Bolors.RESET}, {{this.languageSpecificName}}: {message}")
            else:
                message = "Error Revert , Reason: Unknown"
                print(f"{Bolors.FAIL}Error Revert {Bolors.RESET}, {{this.languageSpecificName}}. Reason: Unknown")

            self._on_fail("{{this.languageSpecificName}}", message)
    {{/if}}

{{^if this.constant}}
    def send_transaction(self, {{#if inputs}}{{> typed_params inputs=inputs}}, {{/if}}tx_params: Optional[TxParams] = None) -> Union[HexBytes, bytes]:
        """Execute underlying contract method via eth_sendTransaction.
{{sanitizeDevdocDetails this.name this.devdoc.details 8}}{{~#if this.devdoc.params~}}{{#each this.devdoc.params}}
{{makeParameterDocstringRole @key this 8}}{{/each}}{{/if}}
        :param tx_params: transaction parameters
        """
        {{#if inputs}}
        ({{> params }}) = self.validate_and_normalize_inputs({{> params}})
        {{/if}}
        tx_params = super().normalize_tx_params(tx_params)
        return self._underlying_method({{> params}}).transact(tx_params.as_dict())

    def build_transaction(self, {{#if inputs}}{{> typed_params inputs=inputs}}, {{/if}}tx_params: Optional[TxParams] = None) -> dict:
        """Construct calldata to be used as input to the method."""
        {{#if inputs}}
        ({{> params }}) = self.validate_and_normalize_inputs({{> params}})
        {{/if}}
        tx_params = super().normalize_tx_params(tx_params)
        return self._underlying_method({{> params}}).buildTransaction(tx_params.as_dict())

{{/if}}
    def estimate_gas(self, {{#if inputs}}{{> typed_params inputs=inputs}}, {{/if}}tx_params: Optional[TxParams] = None) -> int:
        """Estimate gas consumption of method call."""
        {{#if inputs}}
        ({{> params }}) = self.validate_and_normalize_inputs({{> params}})
        {{/if}}
        tx_params = super().normalize_tx_params(tx_params)
        return self._underlying_method({{> params}}).estimateGas(tx_params.as_dict())
